#version 330

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 textCoord;
layout(location = 2) in vec3 normal;

out VS_OUTT {
	vec3 FragPos;
    vec3 Normal;
    vec2 TextCoord;
    vec4 FragPosLightSpace;
} vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 lightSpaceMatrix;

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	vs_out.FragPos = vec3(model * vec4(position, 1.0)); // 在世界坐标系中指定片元位置
	vs_out.TextCoord = textCoord;
	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vs_out.Normal = normalMatrix * normal; // 计算法向量经过模型变换后值
	vs_out.FragPosLightSpace=lightSpaceMatrix*vec4(vs_out.FragPos,1.0);
}